{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"QuickMD","text":""},{"location":"#todo","title":"TODO","text":""},{"location":"cli/usage/","title":"Using the CLI","text":"<p><code>QuickerMD</code> offers a simple CLI for using the program.</p> <p>At any time, you can use the <code>--help</code> flag to discover any options available for any subcommand.</p>"},{"location":"cli/usage/#basic-usage","title":"Basic Usage","text":""},{"location":"cli/usage/#running-a-config","title":"Running a Config","text":"<p>To run a program, use the appropriately name command, <code>run</code>.</p> <pre><code>quicker_md run --help\nquicker_md run py \"print('Hello, this is cool!')\"\n\n# The basic format is\n# quicker_md run &lt;lang&gt; &lt;input&gt;\n</code></pre> <p>You can also pipe commands!</p> <pre><code>echo \"print('My cool script that echos!')\" | quicker_md run py\n</code></pre> <p>A useful case for this is using input from files!</p> <p>Warning</p> <p>Make sure that you are aware of the contents of the file before using</p>"},{"location":"cli/usage/#getting-your-template","title":"Getting Your Template","text":"<p>To get your template, you can use the <code>dump-template</code> command</p> <pre><code>quicker_md dump-template --help\n\nquicker_md dump-template py\n\n# The basic format is\n# quicker_md dump-template &lt;lang&gt;\n</code></pre>"},{"location":"config/adding-languages/","title":"Adding Languages","text":"<p>To add a language, you must add a new entry to the <code>langs</code> table.</p> <p>The format is <code>[langs.{name}]</code>. The <code>{name}</code> part will be the part that will be searched for in the <code>--lang</code> argument.</p> <p>Tip</p> <p>The <code>{name}</code> can be anything  It is not tied to  the file extension or the language name, but rather just an alias for running the template See File Extensions</p>"},{"location":"config/adding-languages/#examples","title":"Examples","text":"Language Config CLI C <code>[langs.c]</code> <code>--lang c</code> Rust <code>[langs.rust]</code> <code>--lang rust</code> Python <code>[langs.py]</code> <code>--lang py</code>"},{"location":"config/command/","title":"Command","text":"<p>Bug</p> <p>Currently, their is no fallback for executing a command that has no OUT variable The OUT variable is required for executing the file</p> <p>Tip</p> <p>If a language is interpreted, you can simplify the command field by using <code>redir_input</code> See Redir Input</p> <p>The command field tells QuickerMD on how to handle the language.</p>"},{"location":"config/command/#variables","title":"Variables","text":"<p>Quicker MD provides variables that can be used inside the <code>command</code> field</p> Variable Descritption Example IN Refers to the file that is created for the template, if needed. <code>command = [\"node\", \"{{IN}}\"]</code> OUT Refers to the file that will be executed <code>command = [\"gcc\", \"{{IN}}\", \"-o\", \"{{OUT}}\"]</code> INPUT Refers to the input passed by the command line <code>command = [\"python\", \"-c\", \"{{INPUT}}\"]</code> <p>See Compiled vs Interpreted for understanding what determines interpreted vs compiled</p>"},{"location":"config/compiled-vs-interpreted/","title":"Compiled vs Interpreted","text":"<p>To understand the differences between compiled and interpreted programs, we will look at a configuration for each. </p>"},{"location":"config/compiled-vs-interpreted/#c-example-compiled","title":"C example (Compiled)","text":"<p>The <code>command</code> fields holds <code>gcc</code>, <code>{{IN}}</code>, <code>-o</code>, <code>{{OUT}}</code>.</p> <p>The first argument, <code>gcc</code> tells <code>QuickerMD</code> that the program I want to call for the C language is <code>gcc</code>.  The rest are passed as arguments to the program, with <code>{{IN}}</code> and <code>{{OUT}}</code> being substituted with their respective variable. See Command Variables.</p> <p><code>QuickerMD</code> will translate the <code>command</code> to <code>[\"gcc\", \"tmp.c\", \"-o\", \"tmp_exe\"]</code></p> <p>The <code>template</code> field holds a multi-line string that will be used to create a default file for an input. If we run the following in the terminal:</p> <pre><code>quicker_md run c 'printf(\"Hello, from QuickerMD\");' --show-input\n</code></pre> <p>The created temporary file will look:</p> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n\nint main() {\n    printf(\"Hello, from QuickerMD\");\n}\n</code></pre>"},{"location":"config/compiled-vs-interpreted/#python-interpreted","title":"Python (Interpreted)","text":"<p>The <code>command</code> field has just <code>python</code> in the array. This tells <code>QuickerMD</code> that it should run <code>python</code> with no arguments.</p> <p>The <code>redir_input</code> is set to true. This tells <code>QuickerMD</code> that the input passed to it will be redirected to the program, which is <code>python</code></p> <p>If we run the following in the terminal:</p> <pre><code>quicker_md run py 'print(\"Hello, from QuickerMD\")'\n</code></pre> <p>We are essentially running the following:</p> <pre><code>echo 'print(\"Hello, from QuickerMD\")' | python\n</code></pre>"},{"location":"config/example-config/","title":"Default Config","text":"<p><code>QuickerMD</code>'s essentially allows for infinite customizability, as it allows for any language and code to be configured.</p>"},{"location":"config/example-config/#configtoml","title":"config.toml","text":"<p>This example config has support for simple use cases for <code>C</code>, <code>JavaScript</code>, <code>Rust</code>, and <code>Python</code>. Feel free to use this as a preliminary config, and modify this as your workflow changes.</p> <pre><code>[langs.c] # Configuration for C, --lang c\ncommand = [\"gcc\", \"{{IN}}\", \"-o\", \"{{OUT}}\"] \ncomment = \"// \"\ntemplate =\"\"\"\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n\nint main() {\n  {{INPUT}}\n}\n\"\"\"\n\n[langs.js] # Configuration for JavaScript, --lang js\ncommand = [\"node\"] \ncomment = \"// \"\nredir_input = true\n\n[langs.py] # Configuration for Python, --lang py\ncommand = [\"python\"]\ncomment = \"# \"\nredir_input = true\n\n[langs.ps] # Configuration for Powershell, --lang ps\ncommand = [\"pwsh\", \"-NoProfile\", \"-NonInteractive\", \"-Command\", \"{{INPUT}}\"]\ncomment = \"# \"\n\n[langs.rust] # Configuration for Rust, --lang rust\nextension = \"rs\"\ncommand = [\"rustc\", \"{{IN}}\", \"-o\", \"{{OUT}}\"]\ncomment = \"// \"\ntemplate = \"\"\"\npub fn main() {\n    {{INPUT}}\n}\n\"\"\"\n</code></pre> <p>Try it with the following commands! <pre><code>quicker_md run js \"console.log('Hello, from QuickerMD!')\" --show-input\n</code></pre></p>"},{"location":"config/example-config/#understanding-configuration","title":"Understanding Configuration","text":"<p>The config uses the <code>toml</code> format.</p> <p>Each individual entry is composed of the following:</p> Key Required Default Description Example Documentation <code>[lang.{name}]</code> True N/A Table that holds all the languages <code>[lang.c]</code> N/A <code>command</code> True N/A Command to run <code>command = [\"gcc\", \"-o\", \"{{OUT}}\", \"{{IN}}\"]</code> Command <code>redir_input</code> False False Whether to use input as stdin for <code>command</code> <code>redir_input = true</code><code>command = [\"node\"]</code> Redirecting Input <code>template</code> False None Template string for compiled languages See Example Config Templating <code>extension</code> False {name} File extension to use if file on compiled language <code>extension = \"rs\"</code> File Extensions <code>run</code> False True/{{OUT}} Whether to run a 'run' command after <code>command</code>, and optionally a command run = [\"my_compiled_program\", \"Hello!\" Running your Program"},{"location":"config/file-extensions/","title":"File Extensions","text":"<p>By default, the file extension for the created file is the name.</p> <p>In the following case: <pre><code>[langs.rust]\ncommand = [\"rustc\", \"{{IN}}\", \"-o\", \"{{OUT}}\"]\ntemplate = \"\"\"\npub fn main() {\n    {{INPUT}}\n}\n\"\"\"\n</code></pre></p> <p>Running the command: <pre><code>quicker_md run rust \"println!('Hello, world!');\"\n</code></pre></p> <p>Would produce the temporary file <code>out.rust</code>. While this may run, it is not recommended to use incorrect file types, as this may through warnings to the compiler.</p> <p>To prevent this the field <code>extension</code> is provided to tell <code>QuickerMD</code> the correct file type for the language.</p> <p>In the rust example, the correct usage of the <code>extension</code> field would be: <pre><code>[langs.rust]\nextension = \"rs\"\ncommand = [\"rustc\", \"{{IN}}\", \"-o\", \"{{OUT}}\"]\ntemplate = \"\"\"\npub fn main() {\n    {{INPUT}}\n}\n\"\"\"\n</code></pre></p>"},{"location":"config/getting-started/","title":"Getting Started","text":"<p>QuickerMD is a tool that allows for easily running short snippets of both interpreted and compiled languages. This tool allows for easy gathering output of various languages with predefined templates.</p>"},{"location":"config/getting-started/#installation","title":"Installation","text":"<ul> <li>Building From Source</li> </ul> Installation on Windows <p>To prevent Windows from truncating a path that is to large, it is recommend to run the following command in an admin terminal: <pre><code>Set-ItemProperty 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\FileSystem' -Name 'LongPathsEnabled' -Value 1\n</code></pre></p>"},{"location":"config/getting-started/#building-from-source","title":"Building From source","text":"<pre><code>git clone https://github.com/oonamo/QuickerMD.git quickermd\ncd quickermd\ncargo install --path .\n</code></pre> <p>Once installed, head over to Example Configuration!</p>"},{"location":"config/redirecting-input/","title":"Redirecting Input","text":"<p>If a language is interpreted or has a REPL their is a high chance that by default, it accepts piped input.</p> <p>Python: <pre><code>echo \"print('hello, python!')\" | python\n</code></pre></p> <p>JavaScript: <pre><code>echo 'console.log(\"hello, js!\")' | node\n</code></pre></p> <p>To mimic this behavior, QuickMD offers the <code>redir_input</code> key.</p> <p>If <code>redir_input</code> is set for the language, the input is \"piped\" to the <code>command</code> field.</p> <p>The configuration can be simplified to the following:</p> <pre><code>[langs.py]\nredir_input = true\ncommand = [\"python\"]\n\n[langs.js]\nredir_input = true\ncommand = [\"node\"]\n</code></pre>"},{"location":"config/running/","title":"Running your Config","text":"<pre><code>flowchart TB\n    A[Read Config] --&gt; B[Has **redir_input** Field?]\n    B --&gt; |True| C[Pipe Input to **command**]\n    C --&gt; Z[Running Complete]\n    B --&gt; |False| D[Run **command** with set variables]\n    D --&gt; E[Used **input** variable, **command** failed, **or** has **run** field == false?]\n    E --&gt; |True| Z[Running Complete]\n    E --&gt; |False| F[**run** field is an array]\n    F --&gt; |True| G[Run **run** field with variables]\n    G --&gt; Z[Running Complete]\n    F --&gt; |False| H[\"Run ./{{OUT}}\"]\n    H --&gt; Z[Running Complete]</code></pre>"},{"location":"config/running/#language-features","title":"Language Features","text":"<p>By default, if your program is Compiled, <code>QuickerMD</code> will infer that your program needs to be run.</p> <p>When compiling certain languages, such as <code>C</code>, a normal workflow may look like the following:</p> <pre><code>gcc main.c -o main\n</code></pre> <p>This would create an executable named <code>main</code>. In order to run your program, you would need to run the executable.</p> <pre><code>./main\n</code></pre> <p>In total, at least 2 commands are required for <code>C</code>.</p> <p>However, for newer languages such as <code>Go</code> and <code>Rust</code>, just a single command is required.</p> <p>Many of these languages offer support for running your program with just a single command.</p> <pre><code># Rust\ncargo run\n\n# Go\ngo run main.go\n\n# Python\npython main.py\n\n# Zig\nzig run\n</code></pre> <p>For this reason, <code>QuickerMD</code> sets the default behavior to the diagram above, to determine if the command requires another for running.</p>"},{"location":"config/templating/","title":"Templates","text":"<p>Note</p> <p>If <code>redir_input</code> is present, template will be ignored</p> <p>The template fields allows you to write default's for compiled languages that require boilerplate.</p> <p>I.e. C# <pre><code>[langs.cs]\ntemplate = \"\"\"\nusing System;\n\nnamespace QuickerMD\n{\n    internal class Program\n    {\n        static void Main(string[] args)\n        {\n            {{INPUT}}\n        }\n    }\n}\n\"\"\"\n</code></pre></p>"}]}